datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  salt          String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  
  files           File[]          // Files uploaded by the user
  secrets         Secret[]        // Secrets created by the user
  isAdmin         Boolean         @default(false) // Temp property for admin users
  invitedBy       String?         // Token of the invitation used
  invitedAt       DateTime?       // When the user registered via invite
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  used        Boolean   @default(false)
  expiresAt   DateTime
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([email])
  @@index([token])
}

model AccessLog {
  id          String    @id @default(cuid())
  type        LogType 
  
  // Client information
  ip          String
  userAgent   String
  country     String?
  city        String?
  region      String?
  timezone    String?
  language    String?
  
  // User info if logged in
  userId      String?
  
  // Relations to content
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  secretId    String?
  secret      Secret?   @relation(fields: [secretId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())

  @@index([ip])
  @@index([fileId])
  @@index([secretId])
  @@index([userId])
  @@index([type])
}

enum LogType {
  UPLOAD
  VIEW
}

model File {
  id              String    @id @default(cuid())
  filename        String
  mimeType        String
  size            Int
  storageKey      String    @unique // Key for your storage service (S3, etc.)
  isViewed        Boolean   @default(false)
  accessToken     String    @unique // Token for accessing the file
  expiresAt       DateTime
  
  // Relations
  userId          String?
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Access logs
  logs            AccessLog[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([accessToken])
}

model Secret {
  id              String    @id @default(cuid())
  encryptedData   String    // Encrypted secret content
  isViewed        Boolean   @default(false)
  accessToken     String    @unique // Token for accessing the secret
  expiresAt       DateTime
  
  // Relations
  userId          String?
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Access logs
  logs            AccessLog[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([accessToken])
}